// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id             Int                @id @default(autoincrement())
  name           String
  email          String             @unique
  code           String             @unique
  password       String  
  role           Role               @default(user)
  products       ProductWithUsers[]
  requests       Request[]
  requestDetails RequestDetail[]
  department     Department         @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentId   Int
  createAt       DateTime           @default(now())
  updateAt       DateTime
}

model Department {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  description   String?
  users         User[]
}

model Product {
  id              Int                 @id @default(autoincrement())
  name            String              @unique
  users           ProductWithUsers[]
  requets         Request[]
  createAt        DateTime            @default(now())
  updateAt        DateTime
}

model ProductWithUsers {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int 
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   Int 
  assignedAt  DateTime  @default(now())

  @@id([userId, productId])
}

model Request {
  id              Int               @id @default(autoincrement())
  title           String            @unique
  description     String?
  createAt        DateTime          @default(now())
  updateAt        DateTime          
  author          User              @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId        Int               
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId       Int
  requestDetails  RequestDetail[]
}

model RequestDetail {
  id              Int       @id @default(autoincrement())
  title           String
  content         String
  image           String?
  file            String?
  toEmail         String
  ccEmail         String?
  request         Request   @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requestId       Int
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId        Int
  createAt        DateTime  @default(now())
  updateAt        DateTime
  isSendEMail     Boolean
}
